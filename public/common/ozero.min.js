(function(O){
    Object.defineProperty(O, 'O0', {
        value : new (function ozero(version){
            Object.defineProperty(this, 'version', {
                value : version
            });
            Object.defineProperty(this, 'classes', {
                value        : new (function(list){
                    Object.defineProperty(this,'has',{
                        configurable : false,
                        enumerable   : false,
                        writable     : false,
                        value        : function(closure){
                            return !!this.get(closure);
                        }
                    });
                    Object.defineProperty(this,'get',{
                        configurable : false,
                        enumerable   : false,
                        writable     : false,
                        value        : function(closure){
                            return list[closure.O0];
                        }
                    });
                    Object.defineProperty(this,'set',{
                        configurable : false,
                        enumerable   : false,
                        writable     : false,
                        value        : function(closure,value){
                            if(!(closure instanceof Function)){
                                throw new Error('invalid class closure');
                            } else
                            if(closure.O0){
                                throw new Error('duplicate class definition');
                            } else {
                                Object.defineProperty(closure,'O0',{
                                    configurable : false,
                                    enumerable   : false,
                                    writable     : false,
                                    value        : list.length
                                });
                                list.push(value);
                                return value;
                            }
                        }
                    });
                })([])
            });
            Object.defineProperty(Object.prototype,'class',{
                get : function(){
                    if(this instanceof Function){
                        return new O0.Class(this);
                    }else
                    if(this.constructor instanceof Function){
                        return new O0.Class(this.constructor);
                    }
                }
            });
            Object.defineProperty(Function.prototype,'new',{
                value : function(){
                    arguments = Array.prototype.slice.call(arguments);
                    arguments.unshift(this);
                    return new (Function.prototype.bind.apply(this,arguments));
                }
            });
            Object.defineProperty(Function.prototype,'declare',{
                value : function(){
                    var Type = this.class.extend.apply(this.class,arguments);
                    if(typeof(window)!=="undefined"){
                        Object.defineProperty(window,Type.class.name,{
                            value : Type
                        });
                    }
                }
            });
        })('0.0.1')
    });
    // exports
    if (typeof(exports) !== "undefined") {
        global.O0 = O.O0;
        module.exports = O.O0;
    } else
    if (typeof(define)  !== "undefined") { // amd
        define(key,function(){return O.O0});
    } else
    if (typeof(window)  !== "undefined") {
        window.O0 = O.O0;
    }
})({});
(function(O){

    O.Member = function Member(o,s,n,c,w,e){
        if(o instanceof O.Class){
            Object.defineProperty(this,'owner',{
                value : o
            });
            Object.defineProperty(this,'name',{
                get : function(){return n;},
                set : function(v){n=v;}
            });
            Object.defineProperty(this,'mode',{
                value   : (
                    (s?O.Member.Mode.STATIC:0)       ||
                    (e?O.Member.Mode.ENUMERABLE:0)   ||
                    (w?O.Member.Mode.WRITABLE:0)     ||
                    (c?O.Member.Mode.CONFIGURABLE:0) ||
                    ((this instanceof O.Method) ? O.Member.Mode.METHOD:0) ||
                    ((this instanceof O.Field)  ? O.Member.Mode.FIELD:0)
                )
            });
            Object.defineProperty(this,'isStatic',{
                value : !!s
            });
            Object.defineProperty(this,'isConfigurable',{
                value : !!c
            });
            Object.defineProperty(this,'isWritable',{
                value : !!w
            });
            Object.defineProperty(this,'isEnumerable',{
                value : !!e
            });

        }else{
            throw new Error('invalid class provided for class member');
        }
    };
    O.Member.Mode = {
        STATIC          : 1,
        ENUMERABLE      : 2,
        WRITABLE        : 4,
        CONFIGURABLE    : 8,
        FIELD           : 16,
        METHOD          : 32,
        OVERRIDE        : 64
    };
    O.Member.prototype  = {
        constructor     : O.Member,
        toJSON          : function () {
            return {
                name : this.name,
                mode : this.mode
            }
        },
        toString        : function () {
            return JSON.stringify(this);
        }
    };
})(O0);
(function(O){
    O.Field=function Field(o,s,n,v,c,w,e,G,S){
        O.Member.call(this,o,s,n,c,w,e,v);
        Object.defineProperty(this,'attach',{
            value : function(){

            }
        });
    };
    O.Field.prototype  = {
        constructor     : O.Field,
        __proto__       : O.Member.prototype
    };
})(O0);
(function(O){
    O.Method=function Method(o,s,n,v,c,w,e){
        O.Member.call(this,o,s,n,c,w,e,v);
        var on=n,ov= v,h=[];
        Object.defineProperty(this,'holder',{
            value : (s? o.closure:o.closure.prototype)
        });
        Object.defineProperty(this,'closure',{
            get : function(){
                var mt = this;
                var mc = mt.owner;
                var pm = mc.parent ? mc.parent.member({
                    isStatic    : this.isStatic,
                    name        : this.name
                }):null;

                var m = function(){
                    var _this  = this;
                    var _super = this.super;
                    _this.super = pm?(function(){
                        return pm.closure.apply(_this,arguments);
                    }):null;
                    var result = v.apply(_this,arguments);
                    _this.super = _super;
                    if(typeof(_this.super)!="function"){
                        delete _this.super;
                    }
                    return result;
                };

                m.oo_name = this.name;

                return m;

            },
            set : function(V){v=V}
        });
        Object.defineProperty(this,'attach',{
            value : function(){
                if(!this.isAttached){
                    Object.defineProperty(this.holder, this.name,{
                        writable        : this.isWritable,
                        enumerable      : this.isEnumerable,
                        configurable    : this.isConfigurable,
                        value           : this.closure
                    });
                }
                return this;
            }
        });
        Object.defineProperty(this,'detach',{
            value : function(){
                if(this.isAttached){
                    delete this.holder[this.name];
                }
                return this;
            }
        });
        Object.defineProperty(this,'rename',{
            value : function(name){
                return this.change(name);
            }
        });
        Object.defineProperty(this,'change',{
            value : function(name,body,r){
                if(name instanceof Function){
                    body = name;
                    name = this.name;
                }
                if(!r) {
                    h.push([this.name, this.closure]);
                }
                this.detach();
                this.name       = name || this.name;
                this.closure    = body || this.closure;
                this.attach();
                return this;
            }
        });
        Object.defineProperty(this,'revert',{
            value : function(){
                if(h.length){
                    var last = h.pop();
                    this.change(last[0],last[1],true);
                }
                return this;
            }
        });
        Object.defineProperty(this,'reset',{
            value : function(){
                return this.revert(h=[[on,ov]]);
            }
        });
        Object.defineProperty(this,'isAttached',{
            get : function(){
                var d = Object.getOwnPropertyDescriptor(this.holder,this.name);
                return (d && d.value == this.closure);
            }
        });
    };
    O.Method.prototype  = {
        constructor     : O.Method,
        __proto__       : O.Member.prototype
    };
})(O0);
(function(O){
    O.Class=function Class(c){
        if(O.classes.has(c)){
            return O.classes.get(c);
        }
        function make_constructor(name,parent,closure){
            var super_c = parent.member({
                name : 'constructor'
            });
            var O0O = function(){
                var _super = this.super;
                Object.defineProperty(this,'super',{
                    configurable    : true,
                    writable        : true,
                    value           : super_c.closure.bind(this)
                });
                if(closure){
                    closure.apply(this,arguments);
                }
                Object.defineProperty(this,'super',{
                    configurable    : true,
                    writable        : true,
                    value           : _super
                });
                if(typeof(this.super)!="function"){
                    delete this.super;
                }
            };
            O0O.prototype.__proto__ = parent.closure.prototype;
            O0O.oo_name = name;
            return O0O;
        }
        function init_members(o,s,i,d,k,p,n){
            p = s ? c : c.prototype;
            k = Object.getOwnPropertyNames(p);
            for(i=0;i<k.length;i++){
                n = k[i];
                d = Object.getOwnPropertyDescriptor(p,n);
                if(d){
                    o.members.add(s,n,d.value,d.configurable,d.writable,d.enumerable,d.get,d.set);
                }else{
                    throw new Error('invalid class member name');
                }
            }
        }
        function init_name(){
            var name = c.oo_name || c.name;
            delete c.oo_name;
            return name;
        }
        function init_closure(o){
            Object.defineProperty(o,'name',{
                value : init_name(c)
            });
            Object.defineProperty(o,'parent',{
                get : function(){
                    if(this.closure.prototype.__proto__ && this.closure.prototype.__proto__.constructor){
                        return this.closure.prototype.__proto__.constructor.class;
                    }
                    return null;
                }
            });
            Object.defineProperty(o,'closure',{
                value : c
            });
            Object.defineProperty(o,'member',{
                value : function(query){
                    return this.members.find(query)[0];
                }
            });
            Object.defineProperty(o,'members',{
                value : new (function(list){
                    Object.defineProperty(this,'add',{
                        value : function(s,n,v,c,w,e,vg,vs,m){
                            if(v instanceof Function){
                                m = new O.Method(o, s, n, v, c, w, e, vg, vs);
                            }else{
                                m = new O.Field(o, s, n, v, c, w, e, vg, vs);
                            }
                            list.push(m);
                            return m;
                        }
                    });
                    Object.defineProperty(this,'find',{
                        value : function(query){
                            var result = list.filter(function(member){
                                var match = true;
                                for(var key in query){
                                    if(!(match = (member[key] == query[key]))){
                                        break;
                                    }
                                }
                                return match;
                            });
                            if(o.parent){
                                result = result.concat(o.parent.members.find(query));
                            }
                            return result;
                        }
                    });
                    Object.defineProperty(this,'each',{
                        value : function(callback){
                            return list.filter(callback);
                        }
                    })
                })([])
            });
            Object.defineProperty(o,'extend',{
                value : function(name,options){
                    var cc,sc,cm={},sm={},om={}, k,v;
                    for(k in options){
                        v = options[k];
                        if(k.charAt(0)==':'){
                            k = k.substring(1);
                            if(k == 'static'){
                                for(var sk in v){
                                    sm[sk] = v[sk];
                                }
                            }else
                            if(k == 'object'){
                                for(var ok in v){
                                    om[ok] = v[ok];
                                }
                            }else{
                                cm[k] = v;
                            }
                        } else {
                            om[k] = v;
                        }
                    }
                    if(sm.new){
                        cc = sm.new;
                        delete sm.new;
                    }
                    if(om.new){
                        cc = om.new;
                        delete om.new;
                    }
                    if(sm.static){
                        cm.static = sm.static;
                        delete sm.static;
                    }
                    if(om.static){
                        cm.static = om.static;
                        delete om.static;
                    }
                    if(!cc){
                        cc = this.closure
                    }
                    var cl = make_constructor(name,this,cc).class;
                    for(k in om){
                        cl.members.add(false,k,om[k]).attach();
                    }
                    for(k in sm){
                        cl.members.add(true,k,sm[k]).attach();
                    }
                    for(k in cm){
                        Object.defineProperty(cl,k,Object.getOwnPropertyDescriptor(cm,k));
                    }
                    var ic = cl;
                    while(ic){
                        if(ic.static){
                            ic.static(cl);
                        }
                        ic = ic.parent;
                    }
                    return cl.closure;
                }
            });
            O.classes.set(c,o);
        }
        if(c instanceof Function){
            init_closure(this);
            init_members(this);
            init_members(this,true);
        }else{
            throw new Error('invalid class closure');
        }
    };
    O.Class.prototype  = {
        constructor    : O.Class,
        toString       : function(members){
            var str = ["[class "+this.name+']'];
            if(members){
                str.push("{\n");
                this.members.each(function(member){
                    str.push("  "+member.toString()+'\n');
                })
                str.push("}");
            }
            return str.join('');
        }
    };
})(O0);